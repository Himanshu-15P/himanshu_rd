import cv2
import numpy as np

def find_circles(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.medianBlur(gray, 5)
    circles = cv2.HoughCircles(
        gray, 
        cv2.HOUGH_GRADIENT, 
        dp=1, 
        minDist=20, 
        param1=50, 
        param2=30, 
        minRadius=0, 
        maxRadius=0
    )
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i in circles[0, :]:
            center = (i[0], i[1])  # center of the circle
            radius = i[2]  # radius of the circle
            cv2.circle(image, center, radius, (0, 255, 0), 3)  # draw the circle
    return image

def find_ellipses(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)
    ret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        if len(cnt) >= 5:  # fitEllipse needs at least 5 points
            ellipse = cv2.fitEllipse(cnt)
            cv2.ellipse(image, ellipse, (255, 0, 0), 2)
    return image

def main():
    image = cv2.imread('input_image.jpg')
    if image is None:
        print("Error: Unable to load the image.")
        return
    image_with_circles = find_circles(image.copy())
    image_with_ellipses = find_ellipses(image.copy())
    
    combined_image = np.hstack((image_with_circles, image_with_ellipses))
    cv2.imshow("Circles and Ellipses", combined_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
